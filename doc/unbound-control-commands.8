.\" THIS FILE IS AUTOMATICALLY GENERATED
.\" DO NOT EDIT, MODIFY, COMMIT, ARCHIVE!
.\" LOOK AT smallapp/ubc.xml FOR MORE INFORMATION
.TP
.B start
Start the server. Simply execs \fIunbound\fR(8).
The unbound executable is searched for in the \fBPATH\fR
set in the environment.
It is started with the config file
specified using \fI\-c\fR or the default config file.
.TP
.B stop
Stop the server. The server daemon exits.
.TP
.B echo\fR[\fI.view\fR] \fI\fR[\fI arg ... \fR]\fI\fB
Echo the command line arguments.
Useful as a server connectivity test.
.TP
.B reload
Reload the server.
This flushes the cache and reads the config file fresh.
.TP
.B verbosity \fInumber\fB
Change verbosity value for logging.
Same values as \fBverbosity\fR keyword in \fIunbound.conf\fR(5).
This new setting lasts until the server is issued a reload
(taken from config file again),
or the next verbosity control command.
.TP
.B log_reopen
Reopen the logfile, close and open it.
Useful for logrotation to make the daemon release the file
it is logging to.
If you are using syslog it will attempt to close and open
the syslog (which may not work if chrooted).
.TP
.B stats\fR[\fI.view\fR]
Print statistics, reset the internal counters to zero.
This can be controlled using the \fBstatistics\-cumulative\fR
config statement. 
A view may be specified only if \fBstatistics\-cumulative\fR
is set to \fByes\fR;
otherwise, the command will fail.
Statistics are printed with one [name]: [value] per line.
.TP
.B stats_noreset\fR[\fI.view\fR]
Peek at statistics.
Prints them like the \fBstats\fR command does,
but does not reset the internal counters to zero.
.TP
.B stats_shm
Print statistics using shm.
Requires compiling with shared memory enabled
and configuring the server to use it
.TP
.B status
Display server status.
Exit code 3 if not running
(the connection to the port is refused),
1 on error, 0 if running.
.TP
.B local_zone\fR[\fI.view\fR] \fIname\fB \fItype\fB
Add new local zone with name and type.
Like \fBlocal\-zone\fR config statement.
If the zone already exists, the type is changed to the given argument.
.TP
.B local_zone_remove\fR[\fI.view\fR] \fIname\fB
Remove the local zone with the given name.
Removes all local data inside it.
If the zone does not exist, the command succeeds.
.TP
.B local_data\fR[\fI.view\fR] \fIRR\fB \fIdata ...\fB
Add new local data, the given resource record.
Like \fBlocal\-data\fR config statement,
except for when no covering zone exists.
In that case this remote control command creates a transparent zone
with the same name as this record.
This command is not good at returning detailed syntax errors.
.TP
.B local_data_remove\fR[\fI.view\fR] \fIname\fB
Remove all RR data from local name.
If the name already has no items, nothing happens.
Often results in NXDOMAIN for the name (in a static zone),
but if the name has become an empty nonterminal
(there is still data in domain names below the removed name),
NOERROR nodata answers are the result for that name.
.TP
.B local_zones, local_zones_remove, local_datas, local_datas_remove
.TP
.B local_zones\fR[\fI.view\fR]
Add local zones read from stdin of unbound\-control.
Input is read per line,
with name space type on a line.
For bulk additions.
.TP
.B local_zones_remove\fR[\fI.view\fR]
Remove local zones read from stdin of unbound\-control.
Input is one name per line.
For bulk removals.
.TP
.B local_datas\fR[\fI.view\fR]
Add local data RRs read from stdin of unbound\-control.
Input is one RR per line.
For bulk additions.
.TP
.B local_datas_remove\fR[\fI.view\fR]
Remove local data RRs read from stdin of unbound\-control.
Input is one name per line.
For bulk removals.
.TP
.B dump_cache\fR[\fI.view\fR]
The contents of the cache is printed in a text format to stdout.
You can redirect it to a file to store the cache in a file.
.TP
.B load_cache
The contents of the cache is loaded from stdin.
Uses the same format as dump_cache uses.
Loading the cache with old, or wrong data
can result in old or wrong data returned to clients.
Loading data into the cache in this way is supported
in order to aid with debugging.
.TP
.B lookup \fIname\fB
Print to stdout the name servers that would be used
to look up the name specified.
.TP
.B flush\fR[\fI.view\fR] \fIname\fB
Remove the name from the cache. Removes the types
A, AAAA, NS, SOA, CNAME, DNAME, MX, PTR, SRV and NAPTR.
Because that is fast to do.
Other record types can be removed using 
.B flush_type 
or 
.B flush_zone\fR.
.TP
.B flush_type\fR[\fI.view\fR] \fIname\fB \fItype\fB
Remove the name, type information from the cache.
.TP
.B flush_zone\fR[\fI.view\fR] \fIname\fB
Remove all information at or below the name from the cache.
The rrsets and key entries are removed so that new lookups will be performed.
This needs to walk and inspect the entire cache,
and is a slow operation.
The entries are set to expired in the implementation of this command
(so, with serve\-expired enabled, it will serve that information
but schedule a prefetch for new information).
.TP
.B flush_bogus\fR[\fI.view\fR]
Remove all bogus data from the cache.
.TP
.B flush_negative\fR[\fI.view\fR]
Remove all negative data from the cache.
This is nxdomain answers, nodata answers and servfail answers.
Also removes bad key entries
(which could be due to failed lookups)
from the dnssec key cache,
and iterator last-resort lookup failures from the rrset cache.
.TP
.B flush_stats\fR[\fI.view\fR]
Reset statistics to zero.
.TP
.B flush_requestlist
Drop the queries that are worked on.
Stops working on the queries that the server is working on now.
The cache is unaffected.
No reply is sent for those queries,
probably making those users request again later.
Useful to make the server restart working on queries with new settings,
such as a higher verbosity level.
.TP
.B dump_requestlist
Show what is worked on.
Prints all queries that the server is currently working on.
Prints the time that users have been waiting.
For internal requests, no time is printed.
And then prints out the module status.
This prints the queries from the first thread,
and not queries that are being serviced from other threads.
.TP
.B flush_infra \fI\fR[\fI all \fR|\fI IP \fR]\fI\fB
If \fIall\fR then entire infra cache is emptied.
If a specific \fIIP\fR address,
the entry for that address is removed from the cache.
It contains EDNS, RRT and lameness data.
.TP
.B dump_infra
Show the contents of the infra cache.
.TP
.B set_option \fIopt:\fB \fIval\fB
Set the option to the given value without a reload.
The cache is therefore not flushed.
The option must end with a ':'
and whitespace must be between the option and the value.
Some values may not have an effect if set this way,
the new values are not written to the config file,
not all options are supported.
This is different from the set_option call in libunbound,
where all values work because unbound has not been initialized.
.IP
The values that work are: statistics\-interval, statistics\-cumulative,
do\-not\-query\-localhost, harden\-short\-bufsize, harden\-large\-queries,
harden\-glue, harden\-dnssec\-stripped, harden\-below\-nxdomain,
harden\-referral\-path, prefetch, prefetch\-key, log\-queries,
hide\-identity, hide\-version, identity, version, val\-log\-level,
val\-log\-squelch, ignore\-cd\-flag, add\-holddown, del\-holddown,
keep\-missing, tcp\-upstream, ssl\-upstream, max\-udp\-size, ratelimit,
ip\-ratelimit, cache\-max\-ttl, cache\-min\-ttl, cache\-max\-negative\-ttl.
.TP
.B get_option \fIopt\fB
Get the value of the option.
Give the option name without a trailing ':'.
The value is printed.
If the value is "",
nothing is printed and the connection closes.
On error 'error ...' is printed
(it gives a syntax error on unknown option).
For some options a list of values,
one on each line, is printed.
The options are shown from the config file as modified with set_option.
For some options an override may have been taken
that does not show up with this command,
not results from e.g. the verbosity and forward control commands.
Not all options work,
see list_stubs, list_forwards, list_local_zones
and list_local_data for those.
.TP
.B list_stubs\fR[\fI.view\fR]
List the stub zones in use.
These are printed one by one to the output.
This includes the root hints in use.
.TP
.B list_forwards\fR[\fI.view\fR]
List the forward zones in use.
These are printed zone by zone to the output.
.TP
.B list_insecure
List the zones with domain\-insecure.
.TP
.B list_local_zones\fR[\fI.view\fR]
List the local zones in use.
These are printed one per line with zone type.
.TP
.B list_local_data\fR[\fI.view\fR]
List the local data RRs in use.
The resource records are printed.
.TP
.B list_views
List the configured views, one per line.
.TP
.B insecure_add \fIzone\fB
Add a \fBdomain\-insecure\fR for the given zone,
like the statement in unbound.conf.
Adds to the running unbound without affecting the cache contents
(which may still be bogus, use \fBflush_zone\fR to remove it),
does not affect the config file.
.TP
.B insecure_remove \fIzone\fB
Removes domain\-insecure for the given zone.
.TP
.B ratelimit_list \fI\fR[\fI+a\fR]\fI\fB
List the domains that are ratelimited.
Printed one per line with current estimated qps and qps limit from config.
With +a it prints all domains,
not just the ratelimited domains,
with their estimated qps.
The ratelimited domains return an error
for uncached (new) queries, but cached queries work as normal.
.TP
.B ip_ratelimit_list \fI\fR[\fI+a\fR]\fI\fB
List the ip addresses that are ratelimited.
Printed one per line with current estimated qps and qps limit from config.
With +a it prints all ips,
not just the ratelimited ips,
with their estimated qps.
The ratelimited ips are dropped before checking the cache.
.TP
.B list_auth_zones
List the auth zones that are configured.
Printed one per line with a status,
indicating if the zone is expired and current serial number.
.TP
.B auth_zone_reload \fIzone\fB
Reload the auth zone from zonefile.
The zonefile is read in overwriting the current contents
of the zone in memory.
This changes the auth zone contents itself, not the cache contents.
Such cache contents exists if you set unbound to validate
with for-upstream: yes and that can be cleared with \fBflush_zone\fR \fIzone\fR.
.TP
.B auth_zone_transfer \fIzone\fB
Transfer the auth zone from master.
The auth zone probe sequence is started,
where the masters are probed to see if they have an updated zone
(with the SOA serial check).
And then the zone is transferred for a newer zone version.
.TP
.B rpz_enable \fIzone\fB
Enable the RPZ zone if it had previously been disabled.
.TP
.B rpz_disable \fIzone\fB
Disable the RPZ zone.
.TP
.B view_list_local_zones \fIview\fB
Deprecated - synonym for \fBlist_local_zones\fR.\fIview\fR
.TP
.B view_local_zone \fIview\fB \fIname\fB \fItype\fB
Deprecated - synonym for \fBlocal_zone\fR.\fIview\fR
.TP
.B view_local_zone_remove \fIview\fB \fIname\fB
Deprecated - synonym for \fBlocal_zone_remove\fR.\fIview\fR
.TP
.B view_list_local_data \fIview\fB
Deprecated - synonym for \fBlist_local_data\fR.\fIview\fR
.TP
.B view_local_data \fIview\fB \fIRR\fB \fIdata\fB
Deprecated - synonym for \fBlocal_data\fR.\fIview\fR
.TP
.B view_local_data_remove \fIview\fB \fIname\fB
Deprecated - synonym for \fBlocal_data_remove\fR.\fIview\fR
.TP
.B view_local_datas \fIview\fB
Deprecated - synonym for \fBlocal_datas\fR.\fIview\fR
.TP
.B view_local_datas_remove \fIview\fB \fIname\fB
Deprecated - synonym for \fBlocal_datas_remove\fR.\fIview\fR
